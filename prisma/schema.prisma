generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  nome        String
  email       String
  senha       String
  situacao    UserSituation
  nivelAcesso UserType      @map("nivel_acesso")
  createdAt   DateTime
  updatedAt   DateTime
  clientes    Client[]
  pedidos     Request[]
  produtos    Product[]

  @@map("usuario")
}

model Client {
  id        Int       @id @default(autoincrement())
  nome      String
  telefone  String?
  email     String?
  createdAt DateTime
  updatedAt DateTime
  usuarioId Int       @map("usuario_id")
  usuario   User      @relation(fields: [usuarioId], references: [id])
  endereco  Address?
  pedidos   Request[]

  @@map("cliente")
}

model Address {
  id          Int      @id @default(autoincrement())
  cep         String
  bairro      String
  rua         String
  numero      String
  complemento String?
  clienteId   Int      @unique @map("cliente_id")
  cidade      String
  createdAt   DateTime
  updatedAt   DateTime
  cliente     Client   @relation(fields: [clienteId], references: [id])

  @@map("endereco")
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  path      String
  produtoId Int     @map("produto_id")
  produto   Product @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("imagem_produto")
}

model Product {
  id             Int             @id @default(autoincrement())
  descricao      String
  unidade        Unit
  createdAt      DateTime
  updatedAt      DateTime
  usuarioId      Int             @map("usuario_id")
  categoria      Category
  imagensProduto ProductImages[]
  itensPedido    RequestItem[]
  usuario        User            @relation(fields: [usuarioId], references: [id])

  @@map("produto")
}

model Request {
  id                Int              @id @default(autoincrement())
  status            Status
  clienteId         Int              @map("cliente_id")
  dataEntrega       DateTime         @map("data_entrega")
  dataPedido        DateTime         @default(now()) @map("data_pedido")
  formaPagamento    PaymentMethods   @map("forma_pagamento")
  modalidadeEntrega DeliveryModality @map("modalidade_entrega")
  observacao        String?
  createdAt         DateTime
  updatedAt         DateTime         @updatedAt
  usuarioId         Int              @map("usuario_id")
  itensPedido       RequestItem[]
  cliente           Client           @relation(fields: [clienteId], references: [id])
  usuario           User             @relation(fields: [usuarioId], references: [id])

  @@map("pedido")
}

model RequestItem {
  id            Int     @id @default(autoincrement())
  quantidade    Int
  observacao    String?
  pedidoId      Int     @map("pedido_id")
  produtoId     Int     @map("produto_id")
  valorUnitario Float   @map("valor_unitario")
  pedido        Request @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  produto       Product @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("item_pedido")
}

enum UserType {
  ADMIN
  USER
}

enum UserSituation {
  ATIVO
  INATIVO
}

enum Status {
  ACEITO
  FINALIZADO
  CANCELADO
}

enum PaymentMethods {
  CREDITO
  DEBITO
  PIX
  DINHEIRO
}

enum DeliveryModality {
  RETIRADA
  ENTREGA
}

enum Unit {
  KG
  UN
}

enum Category {
  DOCE
  SALGADO
}
